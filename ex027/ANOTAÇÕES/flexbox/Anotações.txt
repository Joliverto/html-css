ANOTAÇÕES DE flex-direction. 

ATENÇÃO: (CENTRALIZAÇÃO DE DIV)
    Lembrar que o 'display: flex;' vai apenas no container pai, e todas as configurações serão feitas nele também. inclusive também para a centralização de div.

    Para centralizar uma div no container pai, dá para seguir o código padrão inicial:

    container {
        display: flex;
        flex-flow: row nowrap;
        justify-content: center;
        align-items: center;
    }


> direções (direction) 
    Só existem 3 direções para orientar o flex-direction
        Por padrão, o flex direction sempre vai iniciar em 'flex-direction: row;' ou seja, em linha, da esquerda para a direita.
        
        'flex-direction: row-reverse;' para alocar os items do container pai de flex-box da direita para a esquerda (contrário ao 'flex-direction: row;'). 

        'flex-direction: column;' para alocar os items do container pai de flex-box verticalmente como em uma coluna de cima para baixo.

        'flex-direction: column-reverse' para alocar os items do container pai de flex-box verticalmente de baixo para cima.

> Eixos (axis)
    (Ver a imagem anexada na pasta de flex-box referente aos eixos)
    Existem dois tipos de eixos, os 'main-axis' e 'cross-axis'.
    
    No 'main-axis' podemos configurar o 'main-start' e o 'main-end' que define a orientação dos items do container em uma linha POR PADRÃO DO NOSSO IDIOMA da esquerda para a direita horizontalmente. 

    No 'cross-axis' podemos configurar o 'cross-start'(cima) e o 'cross-end'(baixo) que define a orientação dos items do container de cima para baixo verticalmente POR PADRÃO DO NOSSO IDIOMA.
    
> flex-wrap (empacotamento/encapsulamento)
    Por padrão, o 'flex-wrap' possui o valor 'flex-wrap: nowrap;' que não permite uma quebra automática dos itens para a direção do eixo transversal definida (cima ou baixo ou 'cross-start'/'cross-end').

    Porém, quando há ativação dessa propriedade para 'flex-wrap: wrap;' o item tende a fazer uma quebra em direção ao eixo transversal definido

        >> Há também o 'flex-wrap: wrap-reverse;' que vai inverter a direção transversal da quebra de itens dentro do container.

> flex-flow (SHORTHAND)
    Abreviação das propriedades 'flex-direction' + 'flex-wrap'. Ou seja:
        Ao invés de colocar duas propriedades:

        'flex-direction: row;'
        'flex-wrap: nowrap;'

        Pode-se utilizar a shorthand 'flex-flow':

        'flex-flow: row nowrap;'

> Alinhamento nos eixos flexbox
    (ver as imagens sobre justify-content para entender melhor como usar cada uma delas)

        >> justify-content (Eixo principal: main-axis)

    A princípio vale lembrar que os justify contents serão aplicados de acordo com o 'main-axis' levando em consideração o seu 'main-start' e 'main-end' independente da 'direction' definida, seja 'row' ou 'column'.

    'justify-content: flex-start; / flex-end; / center;'
        'flex-start' = Vai posicionar os itens no 'main-start'.
        'flex-end' = Vai posicionar os itens no 'main-end'.
        'center' = Vai posicionar os itens entre o 'main-start' e o 'main-end'.

    'justify-content: space-between; / space-evenly; / space-around;
    (Recomendo ver imagem de justify-content nas anotações)

    OBS: o 'justify-content: around;' nos items posicionados próximos ao 'main-start' e 'main-end' tem os espaços das extremidades pela metade dos valores normais para uma centralização mais fluida.

        >> align-items (Eixo transversal: cross-axis)

    A princípio vale lembrar que o align-items serão aplicados de acordo com a configuração do 'cross-axis' levando em consideração o seu 'cross-start' e 'cross-end' independenteda 'direction' definida.

    Por padrão, o 'align-items' vai ter um valor 'stretch', ou seja, esticado para a altura do container caso ele possua alguma altura.

    Seguindo a mesma lógica do justify-content, o align-items também vai posicionar seus itens, porém, transversalmente ao eixo principal e limitado as 3 propriedades iniciais:

    'align-items: flex-start; / flex-end; / center;'

        >> align-content

        Alinha os elementos no eixo transversal mas quando eles estão empacotados com a utilização do 'flex-wrap'.

        obs: Só se usa 'align-content' quando se está ativo o 'flex-wrap: wrap:'

        Por padrão o 'align-content' tem valor 'stretch'. Mas ele também tem as mesmas possibilidades de usar os valores do justify-content. Ou seja: 
            'align-content: flex-start / flex-end / space-between; / space-evenly; / space-around;

> Anatomia dos itens flexbox (flex007)
    >> order

    A propriedade 'order' atribui ao item a ordem em que ele irá aparecer dentro do container que estiverem inseridos. 

    Exemplo: 'order:-1' aparecerá primeiro que o 'order:0' e antes que o 'order:1'.

    Todo item em flexbox terá 'order:0' por padrão

    Se ambos os valores, por exemplo: A e B tiverem 'order:0' no seu CSS, então a página irá priorizar o item que vier primeiro dentro do HTML, ou seja, se o A for colocado antes do item B, então ele vai tender a aparecer primeiro, mesmo tendo o valor de order igual.

    >> align-self

    * Funciona diretamente no cross-axis

    * Serve para alinhar cada item dentro do container  individualmente, já que essa propriedade se aplica individualmente neles.

    * Composto por 5 valores:

        >>> align-self: auto;

            Vai herdar a caracteristica do alinhamento vertical do container pai, seja ele 'align-item' ou 'align-content'.

        >>> align-self: flex-start; : Início do container

        >>> align-self: flex-end; : Final do container

        >>> align-self: center; : Centraliza o item

        >>> align-stretch; : Vai puxar o item para fazer uma ocupação completa do eixo transversal do container.

> Propriedade flex-basis em flexbox
    Valor 'auto' padrão. Ou seja, o tamanho de cada item vai se adaptar ao tamanho do conteúdo que tiver dentro dele.

    Os valores dessa propriedade podem ser definidas por pixels, contanto que eles não ultrapassem o valor do container para que não "vazem".
        Caso o flex-basis receba um valor em pixels, o item dentro do container irá tentar se adaptar com esse tamanho na direção do 'row' ou 'column', porém o valor dele pode sofrer alguma alteração para tentar se adaptar a determinadas resoluções diferentes.




    